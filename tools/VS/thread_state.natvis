<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright (c) 2014-2016 Hartmut Kaiser                                 -->

<!-- Use, modification and distribution are subject to the Boost Software   -->
<!-- License, Version 1.0. (See accompanying file LICENSE_1_0.txt           -->
<!-- or copy at http://www.boost.org/LICENSE_1_0.txt)                       -->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="hpx::threads::detail::combined_tagged_state&lt;enum hpx::threads::thread_schedule_state, enum hpx::threads::thread_restart_state&gt;">
        <DisplayString>{{ state={(hpx::threads::thread_schedule_state)((state_ &gt;&gt; 56) &amp; 0xff)}, stateex={(hpx::threads::thread_restart_state)((state_ &gt;&gt; 48) &amp; 0xff)}, tag={state_ &amp; 0xffffffffffff,d} }}</DisplayString>
        <Expand>
            <Item Name="[state]">(hpx::threads::thread_schedule_state)((state_ &gt;&gt; 56) &amp; 0xff)</Item>
            <Item Name="[stateex]">(hpx::threads::thread_restart_state)((state_ &gt;&gt; 48) &amp; 0xff)</Item>
            <Item Name="[tag]">state_ &amp; 0xffffffffffff,d</Item>
        </Expand>
    </Type>

    <Type Name="boost::atomics::atomic&lt;hpx::threads::detail::combined_tagged_state&lt;enum hpx::threads::thread_schedule_state, enum hpx::threads::thread_restart_state&gt;&gt;">
        <DisplayString>{{ state={(hpx::threads::thread_schedule_state)((m_storage &gt;&gt; 56) &amp; 0xff)}, stateex={(hpx::threads::thread_restart_state)((m_storage &gt;&gt; 48) &amp; 0xff)}, tag={m_storage &amp; 0xffffffffffff,d} }}</DisplayString>
        <Expand>
            <Item Name="[state]">(hpx::threads::thread_schedule_state)((m_storage &gt;&gt; 56) &amp; 0xff)</Item>
            <Item Name="[stateex]">(hpx::threads::thread_restart_state)((m_storage &gt;&gt; 48) &amp; 0xff)</Item>
            <Item Name="[tag]">m_storage &amp; 0xffffffffffff,d</Item>
        </Expand>
    </Type>

</AutoVisualizer>
